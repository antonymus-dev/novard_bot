import asyncio
import logging
import sqlite3
from datetime import datetime

from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

TOKEN = "7982478031:AAHDwNmUIBZp_0LKrlS6cyu6BBdgpAtKc6k"
ADMIN_ID = 1642890158

def back_button():
    builder = InlineKeyboardBuilder()
    builder.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back")
    return builder.as_markup()

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
class CourseStates(StatesGroup):
    choosing_module = State()
    in_module = State()
    writing_feedback = State()

# --- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö ---


def add_user(chat_id):
    cursor.execute("INSERT OR IGNORE INTO users (chat_id) VALUES (?)", (chat_id,))
    conn.commit()

def get_all_users():
    cursor.execute("SELECT chat_id FROM users")
    return [row[0] for row in cursor.fetchall()]

conn = sqlite3.connect("users.db")
cursor = conn.cursor()
cursor.execute("""
    CREATE TABLE IF NOT EXISTS progress (
        user_id INTEGER PRIMARY KEY,
        m0 INTEGER DEFAULT 0,
        m1 INTEGER DEFAULT 0,
        m2 INTEGER DEFAULT 0,
        m3 INTEGER DEFAULT 0
    )
""")
cursor.execute("""
    CREATE TABLE IF NOT EXISTS feedback (
        user_id INTEGER,
        username TEXT,
        feedback TEXT,
        submitted_at TEXT
    )
""")
conn.commit()

# –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        chat_id INTEGER PRIMARY KEY
    )
""")
conn.commit()

# --- –ú–æ–¥—É–ª–∏ –∫—É—Ä—Å–∞ ---
MODULES = [
    {"title": "–í–µ–±–∏–Ω–∞—Ä 1: –í–≤–µ–¥–µ–Ω–∏–µ", "video": "https://example.com/webinar1", "material_link": "https://drive.google.com/drive/folders/10Vsq0-CDwda_7zrC1z5A4Z6bH3PkmBoi?usp=sharing"},
    {"title": "–í–µ–±–∏–Ω–∞—Ä 2: –ü—Ä–æ–º–ø—Ç–∏–Ω–≥", "video": "https://example.com/webinar2", "material_link": "https://drive.google.com/drive/folders/1j6zPFHcr82FRkgzUbrO8OdhjCXSSd0fn?usp=sharing"},
    {"title": "–í–µ–±–∏–Ω–∞—Ä 3: –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è", "video": "https://example.com/webinar3", "material_link": "https://drive.google.com/drive/folders/1yOqabtMHYH_GrgjJtnS1n_k6oS8myee-?usp=sharing"},
    {"title": "–í–µ–±–∏–Ω–∞—Ä 4: –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è", "video": "https://example.com/webinar4", "material_link": "https://drive.google.com/drive/folders/140iQi5wHLp0GAIlOuTsI2OsSMa6YRR0A?usp=sharing"},
    {"title": "–í–µ–±–∏–Ω–∞—Ä 5: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏", "video": "https://example.com/webinar5", "material_link": "https://drive.google.com/drive/folders/1c_TSVegOYMnuaFSpb50xm26EOTvXi69R?usp=sharing"},
]

# --- –ö–Ω–æ–ø–∫–∏ ---
def start_button():
    kb = InlineKeyboardBuilder()
    kb.button(text="–ù–∞—á–∞—Ç—å", callback_data="start_course_menu")
    kb.adjust(1)
    return kb.as_markup()

def main_menu():
    kb = InlineKeyboardBuilder()
    kb.button(text="üîπ –ü—Ä–æ–π—Ç–∏ –∫—É—Ä—Å", callback_data="start_course")
    kb.button(text="üîπ –ó–∞–ø–∏—Å–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", callback_data="materials")
    kb.button(text="üîπ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data="ask_question")
    kb.button(text="üîπ –ü–æ–º–æ—â—å / FAQ", callback_data="faq")
    kb.button(text="üîπ –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", callback_data="my_progress")
    kb.button(text="üîπ –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç", callback_data="certificate")
    kb.button(text="üîπ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å", callback_data="feedback")
    kb.adjust(2)
    return kb.as_markup()

def modules_keyboard(prefix="module"):
    kb = InlineKeyboardBuilder()
    for i, m in enumerate(MODULES):
        kb.button(text=m["title"], callback_data=f"{prefix}_{i}")
    kb.adjust(1)
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back")
    kb.adjust(1)
    return kb.as_markup()

def module_actions_keyboard(index: int):
    kb = InlineKeyboardBuilder()
    kb.button(text="üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ", callback_data=f"submit_hw_{index}")
    kb.button(text="‚úÖ –ü—Ä–æ–π–¥–µ–Ω!", callback_data=f"complete_{index}")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back")
    return kb.as_markup()

# --- –•–µ–Ω–¥–ª–µ—Ä—ã ---
@dp.message(F.text.lower() == "/start")
async def welcome_message(message: Message):
    add_user(message.chat.id)
    cursor.execute("INSERT OR IGNORE INTO progress (user_id) VALUES (?)", (message.from_user.id,))
    conn.commit()

    photo = FSInputFile("files/welcome.jpg")  # –ø—É—Ç—å –∫ —Ç–≤–æ–µ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é

    await message.answer_photo(
        photo=photo,
        caption=(
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –æ–±—É—á–∞—é—â–∏–π –±–æ—Ç –ø–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º!\n\n"
            "–ó–¥–µ—Å—å –≤—ã —Å–º–æ–∂–µ—Ç–µ:\n"
            "- –°–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏ –≤–µ–±–∏–Ω–∞—Ä–æ–≤ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã\n"
            "- –í—ã–ø–æ–ª–Ω—è—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
            "- –ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫—É—Ä—Å–∞\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *–ù–∞—á–∞—Ç—å*, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é."
        ),
        reply_markup=start_button(),
        parse_mode="Markdown"
    )

@dp.callback_query(F.data == "start_course")
async def start_course(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–µ–±–∏–Ω–∞—Ä:", reply_markup=modules_keyboard())
    await state.set_state(CourseStates.choosing_module)

@dp.callback_query(F.data.startswith("module_"))
async def open_module(callback: CallbackQuery, state: FSMContext):
    index = int(callback.data.split("_")[1])
    module = MODULES[index]
    #await callback.message.answer(
    #    f"üìö –í—ã –≤—ã–±—Ä–∞–ª–∏: {module['title']}\nüé• –í–∏–¥–µ–æ–∑–∞–ø–∏—Å—å: {module['video']}"
    #)
    #file = FSInputFile(module["file"])
    #await callback.message.answer_document(file, caption="üìÑ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ")
    #await callback.message.answer("‚¨áÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=module_actions_keyboard(index))
    #await state.set_state(CourseStates.in_module)
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back")
    await callback.message.answer("–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å—å –≤–µ–±–∏–Ω–∞—Ä–∞.", reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("submit_hw_"))
async def submit_homework(callback: CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back")
    await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ...", reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("complete_"))
async def complete_module(callback: CallbackQuery):
    user_id = callback.from_user.id
    index = int(callback.data.split("_")[1])
    cursor.execute(f"UPDATE progress SET m{index} = 1 WHERE user_id = ?", (user_id,))
    conn.commit()
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back")
    await callback.message.answer("‚úÖ –ú–æ–¥—É–ª—å –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω!", reply_markup=kb.as_markup())

@dp.callback_query(F.data == "my_progress")
async def show_progress(callback: CallbackQuery):
    user_id = callback.from_user.id
    cursor.execute("SELECT m0, m1, m2, m3, m4 FROM progress WHERE user_id = ?", (user_id,))
    result = cursor.fetchone() or (0, 0, 0, 0, 0)
    progress = "\n".join(
        f"{'‚úÖ' if done else '‚ùå'} {MODULES[i]['title']}" for i, done in enumerate(result)
    )
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back")
    await callback.message.answer(f"üá∫üá≥ –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:\n{progress}", reply_markup=kb.as_markup())

@dp.callback_query(F.data == "materials")
async def materials(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å:", reply_markup=modules_keyboard(prefix="docs"))

@dp.callback_query(F.data.startswith("docs_"))
async def docs_module(callback: CallbackQuery):
    index = int(callback.data.split("_")[1])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
    material_link = MODULES[index].get("material_link")

    if material_link:
        await callback.message.answer(
            f"üìÇ *–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è {MODULES[index]['title']}*\n"
            f"[–û—Ç–∫—Ä—ã—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã]({material_link})",
            parse_mode="Markdown"
        )
    else:
        await callback.message.answer("–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —ç—Ç–æ–≥–æ –≤–µ–±–∏–Ω–∞—Ä–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back")
    kb.adjust(1)
    await callback.message.answer("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=kb.as_markup())

@dp.callback_query(F.data == "ask_question")
async def ask_question(callback: CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="üì¢ –û–±—â–∏–π —á–∞—Ç", url="https://t.me/+Bgj6eTVC5QwxOTRi")
    kb.button(text="üë§ –õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", url="https://t.me/vorobidze")
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back")
    kb.adjust(1)
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:", reply_markup=kb.as_markup())

@dp.callback_query(F.data == "faq")
async def faq(callback: CallbackQuery):
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back")
    await callback.message.answer(
        """‚ùì *–ü–æ–º–æ—â—å –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã*

–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å–∞ –ø–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º. –í–æ—Ç –∫–∞–∫ –∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —à–∞–≥ –∑–∞ —à–∞–≥–æ–º:

---

*1. –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*
–ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π */start* –≤—ã —É–≤–∏–¥–∏—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏:
- **–ü—Ä–æ–π—Ç–∏ –∫—É—Ä—Å** ‚Äî –¥–æ—Å—Ç—É–ø –∫ –≤–µ–±–∏–Ω–∞—Ä–∞–º –∏ –¥–æ–º–∞—à–Ω–∏–º –∑–∞–¥–∞–Ω–∏—è–º.
- **–ó–∞–ø–∏—Å–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã** ‚Äî —Ñ–∞–π–ª—ã –∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–µ–±–∏–Ω–∞—Ä–∞.
- **–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å** ‚Äî —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—â–∏–π —á–∞—Ç –∏ –ª–∏—á–Ω—ã–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.
- **–ü–æ–º–æ—â—å / FAQ** ‚Äî —Ç–µ–∫—É—â–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.
- **–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å** ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞, –∫–∞–∫–∏–µ –º–æ–¥—É–ª–∏ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω—ã.
- **–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç** ‚Äî –≤—ã–¥–∞—ë—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π.
- **–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å** ‚Äî –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ –∫—É—Ä—Å–µ.

---

*2. –ö–∞–∫ –ø—Ä–æ–π—Ç–∏ –∫—É—Ä—Å*
- –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **"–ü—Ä–æ–π—Ç–∏ –∫—É—Ä—Å"**.
- –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –≤–µ–±–∏–Ω–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞.
- –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å—å—é –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏.
- –ü–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:
  - –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **"–û—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ"**;
  - –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª —Å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–º –∑–∞–¥–∞–Ω–∏–µ–º.
- –ö–æ–≥–¥–∞ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ, –æ—Ç–º–µ—Ç—å—Ç–µ –º–æ–¥—É–ª—å –∫–∞–∫ **"–ü—Ä–æ–π–¥–µ–Ω"**.

---

*3. –ú–∞—Ç–µ—Ä–∏–∞–ª—ã*
- –í —Ä–∞–∑–¥–µ–ª–µ **"–ó–∞–ø–∏—Å–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã"** –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤—Å–µ —Ñ–∞–π–ª—ã –¥–ª—è –≤–µ–±–∏–Ω–∞—Ä–æ–≤ (–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏, –º–µ—Ç–æ–¥–∏—á–∫–∏).
- –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –º–æ–¥—É–ª—å, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã.

---

*4. –ü—Ä–æ–≥—Ä–µ—Å—Å*
- –í —Ä–∞–∑–¥–µ–ª–µ **"–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å"** –≤—ã –≤–∏–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π:
  - –ó–µ–ª–µ–Ω–∞—è –≥–∞–ª–æ—á–∫–∞ (‚úÖ) ‚Äî –º–æ–¥—É–ª—å –ø—Ä–æ–π–¥–µ–Ω.
  - –ö—Ä–∞—Å–Ω—ã–π –∫—Ä–µ—Å—Ç–∏–∫ (‚ùå) ‚Äî –º–æ–¥—É–ª—å –µ—â—ë –Ω–µ –ø—Ä–æ–π–¥–µ–Ω.
- –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∫–æ–≥–¥–∞ –≤—ã –æ—Ç–º–µ—á–∞–µ—Ç–µ –º–æ–¥—É–ª—å –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω.

---

*5. –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç*
- –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤—ã–¥–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è *–≤—Å–µ—Ö* –º–æ–¥—É–ª–µ–π.
- –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **"–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"** ‚Äî –±–æ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ –≤—ã–¥–∞—Å—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞.

---

*6. –ö–∞–∫ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å*
- –ö–Ω–æ–ø–∫–∞ **"–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"** –æ—Ç–∫—Ä–æ–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Å–≤—è–∑–∏:
  - –û–±—â–∏–π —á–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫—É—Ä—Å–∞.
  - –õ–∏—á–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.

---

*7. –ö–∞–∫ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤*
- –ö–Ω–æ–ø–∫–∞ **"–û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å"** –ø–æ–∑–≤–æ–ª–∏—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤:
  - –ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.
  - –û—Ç–∑—ã–≤ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.

---

*8. –ö–Ω–æ–ø–∫–∞ –ù–∞–∑–∞–¥*
- –í –∫–∞–∂–¥–æ–º —Ä–∞–∑–¥–µ–ª–µ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ **"‚¨ÖÔ∏è –ù–∞–∑–∞–¥"**, —á—Ç–æ–±—ã –±—ã—Å—Ç—Ä–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.

---

–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏: [—Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç] –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å –Ω–∞–ø—Ä—è–º—É—é —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º: [—Å—Å—ã–ª–∫–∞ –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç].
""",
        reply_markup=kb.as_markup(),
        parse_mode="Markdown"
    )

@dp.callback_query(F.data == "certificate")
async def certificate(callback: CallbackQuery):
    user_id = callback.from_user.id
    cursor.execute("SELECT m0, m1, m2, m3 FROM progress WHERE user_id = ?", (user_id,))
    modules = cursor.fetchone() or (0, 0, 0, 0)
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back")
    if all(modules):
        await callback.message.answer(
            "üìú –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø—Ä–æ—à–ª–∏ –∫—É—Ä—Å. –ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É.",
            reply_markup=kb.as_markup()
        )
    else:
        left = "\n".join(f"{MODULES[i]['title']}" for i, m in enumerate(modules) if not m)
        await callback.message.answer(
            f"‚ùó –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç, –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –≤—Å–µ –º–æ–¥—É–ª–∏.\n–û—Å—Ç–∞–ª–æ—Å—å:\n{left}",
            reply_markup=kb.as_markup()
        )

@dp.callback_query(F.data == "feedback")
async def feedback(callback: CallbackQuery, state: FSMContext):
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back")
    await callback.message.answer("‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –æ—Ç–∑—ã–≤ ‚Äî –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.", reply_markup=kb.as_markup())
    await state.set_state(CourseStates.writing_feedback)

@dp.message(CourseStates.writing_feedback)
async def save_feedback(message: Message, state: FSMContext):
    cursor.execute("INSERT INTO feedback (user_id, username, feedback, submitted_at) VALUES (?, ?, ?, ?)",
                   (message.from_user.id, message.from_user.username or "", message.text, datetime.now().isoformat()))
    conn.commit()
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="go_back")
    await bot.send_message(ADMIN_ID, f"üì© –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç @{message.from_user.username}:\n{message.text}")
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! ‚ù§Ô∏è", reply_markup=kb.as_markup())
    await state.clear()

# ================== –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨ ==================

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

@dp.message(F.text == "/admin")
async def admin_panel(message: Message):
    if message.from_user.id != ADMIN_ID:
        return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º `keyboard`
    kb = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")],
            [KeyboardButton(text="üë• –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
        ],
        resize_keyboard=True
    )

    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=kb)

# –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
@dp.message(F.text == "üë• –°–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
async def list_users(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    users = get_all_users()
    text = f"–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(users)}\n" + "\n".join(map(str, users[:50]))
    if len(users) > 50:
        text += "\n..."
    await message.answer(text)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@dp.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def stats(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    count = len(get_all_users())
    await message.answer(f"–í—Å–µ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {count}")

# –†–∞—Å—Å—ã–ª–∫–∞
class BroadcastStates(StatesGroup):
    waiting_text = State()

@dp.message(F.text == "üì¢ –°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É")
async def start_broadcast(message: Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(BroadcastStates.waiting_text)

@dp.message(BroadcastStates.waiting_text)
async def broadcast_send(message: Message, state: FSMContext):
    text = message.text
    users = get_all_users()
    sent = 0
    for user_id in users:
        try:
            await bot.send_message(user_id, text)
            await asyncio.sleep(0.05)
            sent += 1
        except:
            pass
    await message.answer(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent} —Å–æ–æ–±—â–µ–Ω–∏–π.")
    await state.clear()

@dp.callback_query(F.data == "start_course_menu")
async def open_main_menu(callback: CallbackQuery):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

@dp.callback_query(F.data == "go_back")
async def go_back(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())
    
    

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())